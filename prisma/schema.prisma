generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)

  accounts Account[]
  sessions Session[]
  Likes    Likes[]
}

// Topic contains many ideas
model Topic {
  id    String @id @default(cuid())
  name  String
  image String
  ideas Idea[]
}

// ideas contains many sub-ideas
model Idea {
  id      String @id @default(cuid())
  topicId String

  name     String
  topic    Topic     @relation(fields: [topicId], references: [id])
  subideas Subidea[]

  @@index([topicId], name: "topicId")
}

model Subidea {
  id     String @id @default(cuid())
  ideaId String

  name    String
  summary String? @db.VarChar(3000)
  idea    Idea    @relation(fields: [ideaId], references: [id])
  likes   Likes[]

  @@index([ideaId], name: "ideaId")
}

model Likes {
  id        String @id @default(cuid())
  userId    String
  subideaId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subidea Subidea @relation(fields: [subideaId], references: [id])

  @@index([userId], name: "userId")
  @@index([subideaId], name: "subideaId")
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
